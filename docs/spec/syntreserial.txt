01234567890123456789012345678901234567890123456789012345678901234567890123456789
SYNTAX TREE SERIALIZER

the syntax tree serializer, or simply "serializer", acts as outlined by this
document

serializer is executed and provided a syntax tree and symbol tree as arguments
note that in some cases the symbol tree and syntax tree may be merged

serializer must read the syntax tree and translate its contents into a
normalized JSON format, or "jform", which it outputs and then terminates

jform consists of a hierarchy of JSON objects, layered as follows:
package; may not exist within any other object
class; must exist within a package
interface; must exist within a package
method; must exist within either a class or interface
member; must exist within a class
...
<kwc: to be expanded>

objects within this hierarchy contain metadata regarding their syntax tree
counterparts as attributes

every object contains a "type" attribute that identifies what the object itself
represents; type attributes must be one of the following values:
"package", "class", "interface", "method", "member", ... <kwc: to be expanded>

all attributes must be normalized, that is to say their names and values must
be mapped, in order to allow programs to read jform payloads regardless of
origin, to the follow name/value sets:
accessibillity:("package","protected","private","public")
<kwc: to be expanded>

serializer should convey all possible data into the jform model and allow its
consumers to make sense of the resulting content

